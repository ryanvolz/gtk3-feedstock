# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

jobs:
- job: linux
  pool:
    vmImage: ubuntu-16.04
  strategy:
    matrix:
      linux_64_:
        CONFIG: linux_64_
        UPLOAD_PACKAGES: 'True'
        SHORT_CONFIG: linux_64_
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-comp7
      linux_aarch64_:
        CONFIG: linux_aarch64_
        UPLOAD_PACKAGES: 'True'
        SHORT_CONFIG: linux_aarch64_
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-aarch64
      linux_ppc64le_:
        CONFIG: linux_ppc64le_
        UPLOAD_PACKAGES: 'True'
        SHORT_CONFIG: linux_ppc64le_
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-ppc64le
  timeoutInMinutes: 360

  steps:
  - script: |
         rm -rf /opt/ghc
         df -h
    displayName: Manage disk space

  # configure qemu binfmt-misc running.  This allows us to run docker containers
  # embedded qemu-static
  - script: |
      docker run --rm --privileged multiarch/qemu-user-static:register --reset --credential yes
      ls /proc/sys/fs/binfmt_misc/
    condition: not(startsWith(variables['CONFIG'], 'linux_64'))
    displayName: Configure binfmt_misc

  - script: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
    displayName: Run docker build
    env:
      BINSTAR_TOKEN: $(BINSTAR_TOKEN)
      FEEDSTOCK_TOKEN: $(FEEDSTOCK_TOKEN)
      STAGING_BINSTAR_TOKEN: $(STAGING_BINSTAR_TOKEN)
  - script: |
        # Set the artifact name, specialized for this particular job run.
        ARTIFACT_NAME="conda_artifacts_$(build.BuildNumber).$(system.JobAttempt)_$(CONFIG)"
        if [[ ${#ARTIFACT_NAME} -gt 80 ]]; then
          ARTIFACT_NAME="conda_artifacts_$(build.BuildNumber).$(system.JobAttempt)_$(SHORT_CONFIG)"
        fi
        echo "##vso[task.setVariable variable=ARTIFACT_NAME]$ARTIFACT_NAME"
        echo "ARTIFACT_NAME: $ARTIFACT_NAME"

        # Check that the conda-build directory exists for archiving.
        ARTIFACT_DIR=build_artifacts
        if [ -d "$ARTIFACT_DIR" ]; then
          # remove caches to save some artifact space
          rm -rf $ARTIFACT_DIR/git_cache
          rm -rf $ARTIFACT_DIR/pip_cache
          rm -rf $ARTIFACT_DIR/src_cache
          # delete broken symlinks so that artifact publishing doesn't fail
          find $ARTIFACT_DIR -type l -exec test ! -e {} \; -delete
        else
          echo "##vso[task.logissue type=error]conda-build directory does not exist"
          exit 1
        fi
        echo "##vso[task.setVariable variable=ARTIFACT_PATH]$ARTIFACT_DIR"
        echo "ARTIFACT_DIR: $ARTIFACT_DIR"

        if [ $AGENT_JOBSTATUS == "Failed" ]; then
          # Create a zip archive to use as the artifact.
          ARTIFACT_ZIP="$(Build.ArtifactStagingDirectory)/${ARTIFACT_NAME}.zip"
          cd "$ARTIFACT_DIR"
          zip -r -y -q "$ARTIFACT_ZIP" . -x '*.git/*' '*_*_env*/*' '*_cache/*'
          echo "##vso[task.setVariable variable=ARTIFACT_PATH]$ARTIFACT_ZIP"
          echo "ARTIFACT_ZIP: $ARTIFACT_ZIP"
        fi
    displayName: Prepare conda build artifacts
    condition: succeededOrFailed()

  - task: PublishPipelineArtifact@1
    displayName: Store conda build artifacts
    condition: not(eq(variables.ARTIFACT_PATH, ''))
    inputs:
      targetPath: $(ARTIFACT_PATH)
      artifactName: $(ARTIFACT_NAME)